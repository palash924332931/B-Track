//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sandip.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CarSystemEntities : DbContext
    {
        public CarSystemEntities()
            : base("name=CarSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CarType> CarTypes { get; set; }
        public virtual DbSet<CarDetail> CarDetails { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<DailyCarHistory> DailyCarHistories { get; set; }
        public virtual DbSet<POLUnitPrice> POLUnitPrices { get; set; }
        public virtual DbSet<PartsDetail> PartsDetails { get; set; }
        public virtual DbSet<StoreInfo> StoreInfoes { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VWStoreInfo> VWStoreInfoes { get; set; }
    
        public virtual ObjectResult<string> prSaveCarType(Nullable<int> carTypeId, string type, string description, Nullable<int> createdBy, Nullable<System.DateTime> updateTime)
        {
            var carTypeIdParameter = carTypeId.HasValue ?
                new ObjectParameter("CarTypeId", carTypeId) :
                new ObjectParameter("CarTypeId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateTimeParameter = updateTime.HasValue ?
                new ObjectParameter("UpdateTime", updateTime) :
                new ObjectParameter("UpdateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveCarType", carTypeIdParameter, typeParameter, descriptionParameter, createdByParameter, updateTimeParameter);
        }
    
        public virtual ObjectResult<prGetRoles_Result> prGetRoles(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetRoles_Result>("prGetRoles", userIDParameter);
        }
    
        public virtual ObjectResult<string> prSaveRole(Nullable<int> roleId, string name, Nullable<int> createdBy, Nullable<System.DateTime> update)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveRole", roleIdParameter, nameParameter, createdByParameter, updateParameter);
        }
    
        public virtual ObjectResult<string> prSavePaySlip(Nullable<int> paySlipId, string slipNo, string bookNo, Nullable<decimal> amount, string status, Nullable<int> createdBy, Nullable<System.DateTime> update)
        {
            var paySlipIdParameter = paySlipId.HasValue ?
                new ObjectParameter("PaySlipId", paySlipId) :
                new ObjectParameter("PaySlipId", typeof(int));
    
            var slipNoParameter = slipNo != null ?
                new ObjectParameter("SlipNo", slipNo) :
                new ObjectParameter("SlipNo", typeof(string));
    
            var bookNoParameter = bookNo != null ?
                new ObjectParameter("BookNo", bookNo) :
                new ObjectParameter("BookNo", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSavePaySlip", paySlipIdParameter, slipNoParameter, bookNoParameter, amountParameter, statusParameter, createdByParameter, updateParameter);
        }
    
        public virtual ObjectResult<string> prSaveCarDetails(Nullable<int> carId, string registrationNo, string registrationNoBangla, Nullable<System.DateTime> registrationDate, Nullable<int> carTypeId, string status, string reasonForStop, string noOfSeat, Nullable<System.DateTime> onRootDate, Nullable<decimal> totalDistance, string notes, Nullable<int> createdBy, Nullable<System.DateTime> update)
        {
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var registrationNoParameter = registrationNo != null ?
                new ObjectParameter("RegistrationNo", registrationNo) :
                new ObjectParameter("RegistrationNo", typeof(string));
    
            var registrationNoBanglaParameter = registrationNoBangla != null ?
                new ObjectParameter("RegistrationNoBangla", registrationNoBangla) :
                new ObjectParameter("RegistrationNoBangla", typeof(string));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var carTypeIdParameter = carTypeId.HasValue ?
                new ObjectParameter("CarTypeId", carTypeId) :
                new ObjectParameter("CarTypeId", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var reasonForStopParameter = reasonForStop != null ?
                new ObjectParameter("ReasonForStop", reasonForStop) :
                new ObjectParameter("ReasonForStop", typeof(string));
    
            var noOfSeatParameter = noOfSeat != null ?
                new ObjectParameter("NoOfSeat", noOfSeat) :
                new ObjectParameter("NoOfSeat", typeof(string));
    
            var onRootDateParameter = onRootDate.HasValue ?
                new ObjectParameter("OnRootDate", onRootDate) :
                new ObjectParameter("OnRootDate", typeof(System.DateTime));
    
            var totalDistanceParameter = totalDistance.HasValue ?
                new ObjectParameter("TotalDistance", totalDistance) :
                new ObjectParameter("TotalDistance", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveCarDetails", carIdParameter, registrationNoParameter, registrationNoBanglaParameter, registrationDateParameter, carTypeIdParameter, statusParameter, reasonForStopParameter, noOfSeatParameter, onRootDateParameter, totalDistanceParameter, notesParameter, createdByParameter, updateParameter);
        }
    
        public virtual ObjectResult<prGetCarTypes_Result> prGetCarTypes(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetCarTypes_Result>("prGetCarTypes", userIDParameter);
        }
    
        public virtual ObjectResult<string> prDeletePaySlip(Nullable<int> userID, Nullable<int> paySlipId, string bookNo, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var paySlipIdParameter = paySlipId.HasValue ?
                new ObjectParameter("PaySlipId", paySlipId) :
                new ObjectParameter("PaySlipId", typeof(int));
    
            var bookNoParameter = bookNo != null ?
                new ObjectParameter("BookNo", bookNo) :
                new ObjectParameter("BookNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prDeletePaySlip", userIDParameter, paySlipIdParameter, bookNoParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetPaySlipBook_Result> prGetPaySlipBook(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetPaySlipBook_Result>("prGetPaySlipBook", userIDParameter);
        }
    
        public virtual ObjectResult<string> prUpdatePaySlipDetails(Nullable<int> userID, Nullable<int> paySlipId, string bookNo, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var paySlipIdParameter = paySlipId.HasValue ?
                new ObjectParameter("PaySlipId", paySlipId) :
                new ObjectParameter("PaySlipId", typeof(int));
    
            var bookNoParameter = bookNo != null ?
                new ObjectParameter("BookNo", bookNo) :
                new ObjectParameter("BookNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prUpdatePaySlipDetails", userIDParameter, paySlipIdParameter, bookNoParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prUpdateDailyCarLog(Nullable<int> userID, Nullable<int> carLogId, string additionalId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var carLogIdParameter = carLogId.HasValue ?
                new ObjectParameter("CarLogId", carLogId) :
                new ObjectParameter("CarLogId", typeof(int));
    
            var additionalIdParameter = additionalId != null ?
                new ObjectParameter("AdditionalId", additionalId) :
                new ObjectParameter("AdditionalId", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prUpdateDailyCarLog", userIDParameter, carLogIdParameter, additionalIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetDriver_Result> prGetDriver(Nullable<int> userID, Nullable<int> driverId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDriver_Result>("prGetDriver", userIDParameter, driverIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prSaveDriverDetails(Nullable<int> driverId, string employeeId, string name, string nameInBangla, string contactNo, string drivingLicense, string presentAddress, string permanentAddress, string helperName, string helperContactNo, string reference, string status, Nullable<int> createdBy, Nullable<System.DateTime> update, Nullable<System.DateTime> corpJoinDate, Nullable<System.DateTime> depotJoinDate, Nullable<System.DateTime> retirementDate, string reasonForInactive, string grade, Nullable<System.DateTime> dateOfBirth, string fatherName)
        {
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameInBanglaParameter = nameInBangla != null ?
                new ObjectParameter("NameInBangla", nameInBangla) :
                new ObjectParameter("NameInBangla", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var drivingLicenseParameter = drivingLicense != null ?
                new ObjectParameter("DrivingLicense", drivingLicense) :
                new ObjectParameter("DrivingLicense", typeof(string));
    
            var presentAddressParameter = presentAddress != null ?
                new ObjectParameter("PresentAddress", presentAddress) :
                new ObjectParameter("PresentAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var helperNameParameter = helperName != null ?
                new ObjectParameter("HelperName", helperName) :
                new ObjectParameter("HelperName", typeof(string));
    
            var helperContactNoParameter = helperContactNo != null ?
                new ObjectParameter("HelperContactNo", helperContactNo) :
                new ObjectParameter("HelperContactNo", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("Reference", reference) :
                new ObjectParameter("Reference", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            var corpJoinDateParameter = corpJoinDate.HasValue ?
                new ObjectParameter("CorpJoinDate", corpJoinDate) :
                new ObjectParameter("CorpJoinDate", typeof(System.DateTime));
    
            var depotJoinDateParameter = depotJoinDate.HasValue ?
                new ObjectParameter("DepotJoinDate", depotJoinDate) :
                new ObjectParameter("DepotJoinDate", typeof(System.DateTime));
    
            var retirementDateParameter = retirementDate.HasValue ?
                new ObjectParameter("RetirementDate", retirementDate) :
                new ObjectParameter("RetirementDate", typeof(System.DateTime));
    
            var reasonForInactiveParameter = reasonForInactive != null ?
                new ObjectParameter("ReasonForInactive", reasonForInactive) :
                new ObjectParameter("ReasonForInactive", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveDriverDetails", driverIdParameter, employeeIdParameter, nameParameter, nameInBanglaParameter, contactNoParameter, drivingLicenseParameter, presentAddressParameter, permanentAddressParameter, helperNameParameter, helperContactNoParameter, referenceParameter, statusParameter, createdByParameter, updateParameter, corpJoinDateParameter, depotJoinDateParameter, retirementDateParameter, reasonForInactiveParameter, gradeParameter, dateOfBirthParameter, fatherNameParameter);
        }
    
        public virtual ObjectResult<string> prSaveUser(Nullable<int> id, string employeeId, string name, string nameInBangla, string password, string status, string presentAddress, string permanentAddress, Nullable<int> roleId, string contactNo, Nullable<int> createdBy, Nullable<System.DateTime> update, Nullable<System.DateTime> corpJoinDate, Nullable<System.DateTime> depotJoinDate, Nullable<System.DateTime> retirementDate, Nullable<System.DateTime> dateOfBirth, string grade, string fatherName)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var nameInBanglaParameter = nameInBangla != null ?
                new ObjectParameter("NameInBangla", nameInBangla) :
                new ObjectParameter("NameInBangla", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var presentAddressParameter = presentAddress != null ?
                new ObjectParameter("PresentAddress", presentAddress) :
                new ObjectParameter("PresentAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            var corpJoinDateParameter = corpJoinDate.HasValue ?
                new ObjectParameter("CorpJoinDate", corpJoinDate) :
                new ObjectParameter("CorpJoinDate", typeof(System.DateTime));
    
            var depotJoinDateParameter = depotJoinDate.HasValue ?
                new ObjectParameter("DepotJoinDate", depotJoinDate) :
                new ObjectParameter("DepotJoinDate", typeof(System.DateTime));
    
            var retirementDateParameter = retirementDate.HasValue ?
                new ObjectParameter("RetirementDate", retirementDate) :
                new ObjectParameter("RetirementDate", typeof(System.DateTime));
    
            var dateOfBirthParameter = dateOfBirth.HasValue ?
                new ObjectParameter("DateOfBirth", dateOfBirth) :
                new ObjectParameter("DateOfBirth", typeof(System.DateTime));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveUser", idParameter, employeeIdParameter, nameParameter, nameInBanglaParameter, passwordParameter, statusParameter, presentAddressParameter, permanentAddressParameter, roleIdParameter, contactNoParameter, createdByParameter, updateParameter, corpJoinDateParameter, depotJoinDateParameter, retirementDateParameter, dateOfBirthParameter, gradeParameter, fatherNameParameter);
        }
    
        public virtual ObjectResult<string> prSaveDailyPayment(Nullable<int> paymentId, Nullable<int> carLogId, Nullable<decimal> paymentAmount, Nullable<decimal> systemAmount, string notes, Nullable<int> paySlipId, string paymentStatus, Nullable<int> receivedBy, string receivedByName, Nullable<System.DateTime> receivedDate, string status, Nullable<int> createdBy, Nullable<System.DateTime> update, string paymentType)
        {
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var carLogIdParameter = carLogId.HasValue ?
                new ObjectParameter("CarLogId", carLogId) :
                new ObjectParameter("CarLogId", typeof(int));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var systemAmountParameter = systemAmount.HasValue ?
                new ObjectParameter("SystemAmount", systemAmount) :
                new ObjectParameter("SystemAmount", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var paySlipIdParameter = paySlipId.HasValue ?
                new ObjectParameter("PaySlipId", paySlipId) :
                new ObjectParameter("PaySlipId", typeof(int));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var receivedByParameter = receivedBy.HasValue ?
                new ObjectParameter("ReceivedBy", receivedBy) :
                new ObjectParameter("ReceivedBy", typeof(int));
    
            var receivedByNameParameter = receivedByName != null ?
                new ObjectParameter("ReceivedByName", receivedByName) :
                new ObjectParameter("ReceivedByName", typeof(string));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveDailyPayment", paymentIdParameter, carLogIdParameter, paymentAmountParameter, systemAmountParameter, notesParameter, paySlipIdParameter, paymentStatusParameter, receivedByParameter, receivedByNameParameter, receivedDateParameter, statusParameter, createdByParameter, updateParameter, paymentTypeParameter);
        }
    
        public virtual ObjectResult<prGetPaySlipDetails_Result> prGetPaySlipDetails(Nullable<int> userID, Nullable<int> paySlipId, string bookNo, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var paySlipIdParameter = paySlipId.HasValue ?
                new ObjectParameter("PaySlipId", paySlipId) :
                new ObjectParameter("PaySlipId", typeof(int));
    
            var bookNoParameter = bookNo != null ?
                new ObjectParameter("BookNo", bookNo) :
                new ObjectParameter("BookNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetPaySlipDetails_Result>("prGetPaySlipDetails", userIDParameter, paySlipIdParameter, bookNoParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prSaveDailyCarLog(Nullable<int> carLogId, Nullable<int> carId, Nullable<int> driverId, Nullable<int> rootId, Nullable<System.DateTime> checkInDate, Nullable<System.DateTime> checkOutDate, string checkInTime, string checkOutTime, Nullable<decimal> tripNo, Nullable<decimal> totalDistance, Nullable<int> checkInBy, Nullable<int> checkOutBy, Nullable<int> createdBy, Nullable<bool> isUnwantedReturn, string reasonForReturn, string status, Nullable<System.DateTime> update, string routeStartPoint, Nullable<decimal> exceptioalAmount, string tripType, Nullable<decimal> differentRouteIncome, Nullable<int> differentRouteDistance, string additionalIncomeType, Nullable<bool> isUnOfficialDay)
        {
            var carLogIdParameter = carLogId.HasValue ?
                new ObjectParameter("CarLogId", carLogId) :
                new ObjectParameter("CarLogId", typeof(int));
    
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(System.DateTime));
    
            var checkOutDateParameter = checkOutDate.HasValue ?
                new ObjectParameter("CheckOutDate", checkOutDate) :
                new ObjectParameter("CheckOutDate", typeof(System.DateTime));
    
            var checkInTimeParameter = checkInTime != null ?
                new ObjectParameter("CheckInTime", checkInTime) :
                new ObjectParameter("CheckInTime", typeof(string));
    
            var checkOutTimeParameter = checkOutTime != null ?
                new ObjectParameter("CheckOutTime", checkOutTime) :
                new ObjectParameter("CheckOutTime", typeof(string));
    
            var tripNoParameter = tripNo.HasValue ?
                new ObjectParameter("TripNo", tripNo) :
                new ObjectParameter("TripNo", typeof(decimal));
    
            var totalDistanceParameter = totalDistance.HasValue ?
                new ObjectParameter("TotalDistance", totalDistance) :
                new ObjectParameter("TotalDistance", typeof(decimal));
    
            var checkInByParameter = checkInBy.HasValue ?
                new ObjectParameter("CheckInBy", checkInBy) :
                new ObjectParameter("CheckInBy", typeof(int));
    
            var checkOutByParameter = checkOutBy.HasValue ?
                new ObjectParameter("CheckOutBy", checkOutBy) :
                new ObjectParameter("CheckOutBy", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var isUnwantedReturnParameter = isUnwantedReturn.HasValue ?
                new ObjectParameter("IsUnwantedReturn", isUnwantedReturn) :
                new ObjectParameter("IsUnwantedReturn", typeof(bool));
    
            var reasonForReturnParameter = reasonForReturn != null ?
                new ObjectParameter("ReasonForReturn", reasonForReturn) :
                new ObjectParameter("ReasonForReturn", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            var routeStartPointParameter = routeStartPoint != null ?
                new ObjectParameter("RouteStartPoint", routeStartPoint) :
                new ObjectParameter("RouteStartPoint", typeof(string));
    
            var exceptioalAmountParameter = exceptioalAmount.HasValue ?
                new ObjectParameter("ExceptioalAmount", exceptioalAmount) :
                new ObjectParameter("ExceptioalAmount", typeof(decimal));
    
            var tripTypeParameter = tripType != null ?
                new ObjectParameter("TripType", tripType) :
                new ObjectParameter("TripType", typeof(string));
    
            var differentRouteIncomeParameter = differentRouteIncome.HasValue ?
                new ObjectParameter("DifferentRouteIncome", differentRouteIncome) :
                new ObjectParameter("DifferentRouteIncome", typeof(decimal));
    
            var differentRouteDistanceParameter = differentRouteDistance.HasValue ?
                new ObjectParameter("DifferentRouteDistance", differentRouteDistance) :
                new ObjectParameter("DifferentRouteDistance", typeof(int));
    
            var additionalIncomeTypeParameter = additionalIncomeType != null ?
                new ObjectParameter("AdditionalIncomeType", additionalIncomeType) :
                new ObjectParameter("AdditionalIncomeType", typeof(string));
    
            var isUnOfficialDayParameter = isUnOfficialDay.HasValue ?
                new ObjectParameter("IsUnOfficialDay", isUnOfficialDay) :
                new ObjectParameter("IsUnOfficialDay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveDailyCarLog", carLogIdParameter, carIdParameter, driverIdParameter, rootIdParameter, checkInDateParameter, checkOutDateParameter, checkInTimeParameter, checkOutTimeParameter, tripNoParameter, totalDistanceParameter, checkInByParameter, checkOutByParameter, createdByParameter, isUnwantedReturnParameter, reasonForReturnParameter, statusParameter, updateParameter, routeStartPointParameter, exceptioalAmountParameter, tripTypeParameter, differentRouteIncomeParameter, differentRouteDistanceParameter, additionalIncomeTypeParameter, isUnOfficialDayParameter);
        }
    
        public virtual ObjectResult<prGetDailyPaymentReportSection_Result> prGetDailyPaymentReportSection(Nullable<int> userID, Nullable<System.DateTime> selectedDate, Nullable<int> carTypeId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var selectedDateParameter = selectedDate.HasValue ?
                new ObjectParameter("SelectedDate", selectedDate) :
                new ObjectParameter("SelectedDate", typeof(System.DateTime));
    
            var carTypeIdParameter = carTypeId.HasValue ?
                new ObjectParameter("CarTypeId", carTypeId) :
                new ObjectParameter("CarTypeId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDailyPaymentReportSection_Result>("prGetDailyPaymentReportSection", userIDParameter, selectedDateParameter, carTypeIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetDailyCarLogReport_Result> prGetDailyCarLogReport(Nullable<int> userID, Nullable<System.DateTime> date)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDailyCarLogReport_Result>("prGetDailyCarLogReport", userIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<prGetDailyCarTypesReport_Result> prGetDailyCarTypesReport(Nullable<int> userID, Nullable<System.DateTime> date)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDailyCarTypesReport_Result>("prGetDailyCarTypesReport", userIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<prGetRootCost_Result> prGetRootCost(Nullable<int> userID, Nullable<int> rootCostId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var rootCostIdParameter = rootCostId.HasValue ?
                new ObjectParameter("RootCostId", rootCostId) :
                new ObjectParameter("RootCostId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetRootCost_Result>("prGetRootCost", userIDParameter, rootCostIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prSaveRootCost(Nullable<int> rootCostId, Nullable<int> rootId, Nullable<int> carTypeId, Nullable<decimal> firstTripIncome, Nullable<decimal> secondTripIncome, Nullable<decimal> thirdTripIncome, Nullable<decimal> unFirstTripIncome, Nullable<decimal> unSecondTripIncome, Nullable<decimal> unThirdTripIncome, string status, string notes, Nullable<int> createdBy, Nullable<System.DateTime> update)
        {
            var rootCostIdParameter = rootCostId.HasValue ?
                new ObjectParameter("RootCostId", rootCostId) :
                new ObjectParameter("RootCostId", typeof(int));
    
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var carTypeIdParameter = carTypeId.HasValue ?
                new ObjectParameter("CarTypeId", carTypeId) :
                new ObjectParameter("CarTypeId", typeof(int));
    
            var firstTripIncomeParameter = firstTripIncome.HasValue ?
                new ObjectParameter("FirstTripIncome", firstTripIncome) :
                new ObjectParameter("FirstTripIncome", typeof(decimal));
    
            var secondTripIncomeParameter = secondTripIncome.HasValue ?
                new ObjectParameter("SecondTripIncome", secondTripIncome) :
                new ObjectParameter("SecondTripIncome", typeof(decimal));
    
            var thirdTripIncomeParameter = thirdTripIncome.HasValue ?
                new ObjectParameter("ThirdTripIncome", thirdTripIncome) :
                new ObjectParameter("ThirdTripIncome", typeof(decimal));
    
            var unFirstTripIncomeParameter = unFirstTripIncome.HasValue ?
                new ObjectParameter("UnFirstTripIncome", unFirstTripIncome) :
                new ObjectParameter("UnFirstTripIncome", typeof(decimal));
    
            var unSecondTripIncomeParameter = unSecondTripIncome.HasValue ?
                new ObjectParameter("UnSecondTripIncome", unSecondTripIncome) :
                new ObjectParameter("UnSecondTripIncome", typeof(decimal));
    
            var unThirdTripIncomeParameter = unThirdTripIncome.HasValue ?
                new ObjectParameter("UnThirdTripIncome", unThirdTripIncome) :
                new ObjectParameter("UnThirdTripIncome", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveRootCost", rootCostIdParameter, rootIdParameter, carTypeIdParameter, firstTripIncomeParameter, secondTripIncomeParameter, thirdTripIncomeParameter, unFirstTripIncomeParameter, unSecondTripIncomeParameter, unThirdTripIncomeParameter, statusParameter, notesParameter, createdByParameter, updateParameter);
        }
    
        public virtual ObjectResult<prGetDailyCarLog_Result> prGetDailyCarLog(Nullable<int> userID, Nullable<int> carLogId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var carLogIdParameter = carLogId.HasValue ?
                new ObjectParameter("CarLogId", carLogId) :
                new ObjectParameter("CarLogId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDailyCarLog_Result>("prGetDailyCarLog", userIDParameter, carLogIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetIncomeReportDateRange_Result> prGetIncomeReportDateRange(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> carTypeId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var carTypeIdParameter = carTypeId.HasValue ?
                new ObjectParameter("CarTypeId", carTypeId) :
                new ObjectParameter("CarTypeId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetIncomeReportDateRange_Result>("prGetIncomeReportDateRange", userIDParameter, fromDateParameter, toDateParameter, carTypeIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetMonthlyIncomeReportDateRange_Result> prGetMonthlyIncomeReportDateRange(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetMonthlyIncomeReportDateRange_Result>("prGetMonthlyIncomeReportDateRange", userIDParameter, fromDateParameter, toDateParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetMonthlyIncomeReportRouteWise_Result> prGetMonthlyIncomeReportRouteWise(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetMonthlyIncomeReportRouteWise_Result>("prGetMonthlyIncomeReportRouteWise", userIDParameter, fromDateParameter, toDateParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetIncomeReportDateRangeBusWiseSection_Result> prGetIncomeReportDateRangeBusWiseSection(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> routeId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("RouteId", routeId) :
                new ObjectParameter("RouteId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetIncomeReportDateRangeBusWiseSection_Result>("prGetIncomeReportDateRangeBusWiseSection", userIDParameter, fromDateParameter, toDateParameter, routeIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetMenuList_Result> prGetMenuList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetMenuList_Result>("prGetMenuList", userIdParameter);
        }
    
        public virtual ObjectResult<prGetMenuListRoleWise_Result> prGetMenuListRoleWise(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetMenuListRoleWise_Result>("prGetMenuListRoleWise", roleIdParameter);
        }
    
        public virtual ObjectResult<string> prSpecialActionOnCarLog(Nullable<int> userId, Nullable<int> carLogId, string type)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var carLogIdParameter = carLogId.HasValue ?
                new ObjectParameter("CarLogId", carLogId) :
                new ObjectParameter("CarLogId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSpecialActionOnCarLog", userIdParameter, carLogIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetMonthlyBusReportRouteWise_Result> prGetMonthlyBusReportRouteWise(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> carId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetMonthlyBusReportRouteWise_Result>("prGetMonthlyBusReportRouteWise", userIDParameter, fromDateParameter, toDateParameter, carIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetReportSectionDateRange_Result> prGetReportSectionDateRange(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> routeId, Nullable<int> carId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var routeIdParameter = routeId.HasValue ?
                new ObjectParameter("RouteId", routeId) :
                new ObjectParameter("RouteId", typeof(int));
    
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetReportSectionDateRange_Result>("prGetReportSectionDateRange", userIDParameter, fromDateParameter, toDateParameter, routeIdParameter, carIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetRoots_Result> prGetRoots(Nullable<int> userID, Nullable<int> rootId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetRoots_Result>("prGetRoots", userIDParameter, rootIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prSaveRoot(Nullable<int> rootId, string rootName, string name, string startPoint, string endPoint, Nullable<decimal> distance, Nullable<decimal> unofficialDistance, string status, string notes, Nullable<decimal> targetTrip, Nullable<int> createdBy, Nullable<System.DateTime> update)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(int));
    
            var rootNameParameter = rootName != null ?
                new ObjectParameter("RootName", rootName) :
                new ObjectParameter("RootName", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var startPointParameter = startPoint != null ?
                new ObjectParameter("StartPoint", startPoint) :
                new ObjectParameter("StartPoint", typeof(string));
    
            var endPointParameter = endPoint != null ?
                new ObjectParameter("EndPoint", endPoint) :
                new ObjectParameter("EndPoint", typeof(string));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(decimal));
    
            var unofficialDistanceParameter = unofficialDistance.HasValue ?
                new ObjectParameter("UnofficialDistance", unofficialDistance) :
                new ObjectParameter("UnofficialDistance", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var targetTripParameter = targetTrip.HasValue ?
                new ObjectParameter("TargetTrip", targetTrip) :
                new ObjectParameter("TargetTrip", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveRoot", rootIdParameter, rootNameParameter, nameParameter, startPointParameter, endPointParameter, distanceParameter, unofficialDistanceParameter, statusParameter, notesParameter, targetTripParameter, createdByParameter, updateParameter);
        }
    
        public virtual ObjectResult<prGetDailyCarLogDateRange_Result> prGetDailyCarLogDateRange(Nullable<int> userID, Nullable<int> carLogId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var carLogIdParameter = carLogId.HasValue ?
                new ObjectParameter("CarLogId", carLogId) :
                new ObjectParameter("CarLogId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDailyCarLogDateRange_Result>("prGetDailyCarLogDateRange", userIDParameter, carLogIdParameter, fromDateParameter, toDateParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetDashboardReport_Result> prGetDashboardReport(Nullable<int> userID, Nullable<System.DateTime> date)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDashboardReport_Result>("prGetDashboardReport", userIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<prGetBusPaymentHistory_Result> prGetBusPaymentHistory(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> carTypeId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var carTypeIdParameter = carTypeId.HasValue ?
                new ObjectParameter("CarTypeId", carTypeId) :
                new ObjectParameter("CarTypeId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetBusPaymentHistory_Result>("prGetBusPaymentHistory", userIDParameter, fromDateParameter, toDateParameter, carTypeIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetUsers_Result> prGetUsers(Nullable<int> userID, Nullable<int> id, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetUsers_Result>("prGetUsers", userIDParameter, idParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetDailyPaymentLog_Result> prGetDailyPaymentLog(Nullable<int> userID, Nullable<int> paymentId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDailyPaymentLog_Result>("prGetDailyPaymentLog", userIDParameter, paymentIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prDeleteVendor(Nullable<int> vendorId, Nullable<int> userId)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prDeleteVendor", vendorIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<prGetVendorDetails_Result> prGetVendorDetails(Nullable<int> userId, Nullable<int> vendorId, string type)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetVendorDetails_Result>("prGetVendorDetails", userIdParameter, vendorIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prSaveVendorDetails(Nullable<int> vendorId, string name, string contactPerson, string contactNo, string remark, string status, string activityType, Nullable<int> userId, string address)
        {
            var vendorIdParameter = vendorId.HasValue ?
                new ObjectParameter("VendorId", vendorId) :
                new ObjectParameter("VendorId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var contactPersonParameter = contactPerson != null ?
                new ObjectParameter("ContactPerson", contactPerson) :
                new ObjectParameter("ContactPerson", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var activityTypeParameter = activityType != null ?
                new ObjectParameter("ActivityType", activityType) :
                new ObjectParameter("ActivityType", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveVendorDetails", vendorIdParameter, nameParameter, contactPersonParameter, contactNoParameter, remarkParameter, statusParameter, activityTypeParameter, userIdParameter, addressParameter);
        }
    
        public virtual ObjectResult<prGetPol_Result> prGetPol(Nullable<int> userId, Nullable<int> pOLId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var pOLIdParameter = pOLId.HasValue ?
                new ObjectParameter("POLId", pOLId) :
                new ObjectParameter("POLId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetPol_Result>("prGetPol", userIdParameter, pOLIdParameter, fromDateParameter, toDateParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prSavePOLDetails(Nullable<int> pOLId, Nullable<int> carId, Nullable<System.DateTime> checkInDate, Nullable<int> driverId, Nullable<int> issuedById, Nullable<decimal> cNG, Nullable<decimal> diesel, Nullable<decimal> engineOil, Nullable<decimal> powerOil, Nullable<decimal> gearOil, Nullable<decimal> grease, string status, string remark, Nullable<int> createdBy, Nullable<System.DateTime> update)
        {
            var pOLIdParameter = pOLId.HasValue ?
                new ObjectParameter("POLId", pOLId) :
                new ObjectParameter("POLId", typeof(int));
    
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var checkInDateParameter = checkInDate.HasValue ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(System.DateTime));
    
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var issuedByIdParameter = issuedById.HasValue ?
                new ObjectParameter("IssuedById", issuedById) :
                new ObjectParameter("IssuedById", typeof(int));
    
            var cNGParameter = cNG.HasValue ?
                new ObjectParameter("CNG", cNG) :
                new ObjectParameter("CNG", typeof(decimal));
    
            var dieselParameter = diesel.HasValue ?
                new ObjectParameter("Diesel", diesel) :
                new ObjectParameter("Diesel", typeof(decimal));
    
            var engineOilParameter = engineOil.HasValue ?
                new ObjectParameter("EngineOil", engineOil) :
                new ObjectParameter("EngineOil", typeof(decimal));
    
            var powerOilParameter = powerOil.HasValue ?
                new ObjectParameter("PowerOil", powerOil) :
                new ObjectParameter("PowerOil", typeof(decimal));
    
            var gearOilParameter = gearOil.HasValue ?
                new ObjectParameter("GearOil", gearOil) :
                new ObjectParameter("GearOil", typeof(decimal));
    
            var greaseParameter = grease.HasValue ?
                new ObjectParameter("Grease", grease) :
                new ObjectParameter("Grease", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSavePOLDetails", pOLIdParameter, carIdParameter, checkInDateParameter, driverIdParameter, issuedByIdParameter, cNGParameter, dieselParameter, engineOilParameter, powerOilParameter, gearOilParameter, greaseParameter, statusParameter, remarkParameter, createdByParameter, updateParameter);
        }
    
        public virtual int prDeletePOLRecord(Nullable<int> userID, Nullable<int> pOLId)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var pOLIdParameter = pOLId.HasValue ?
                new ObjectParameter("POLId", pOLId) :
                new ObjectParameter("POLId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("prDeletePOLRecord", userIDParameter, pOLIdParameter);
        }
    
        public virtual ObjectResult<prGetJobList_Result> prGetJobList(Nullable<int> userId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> jobId, string type)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetJobList_Result>("prGetJobList", userIdParameter, fromDateParameter, toDateParameter, jobIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetDailyPOLLog_Result1> prGetDailyPOLLog(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> polId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var polIdParameter = polId.HasValue ?
                new ObjectParameter("PolId", polId) :
                new ObjectParameter("PolId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetDailyPOLLog_Result1>("prGetDailyPOLLog", userIDParameter, fromDateParameter, toDateParameter, polIdParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prUpdatePolRecord(Nullable<int> userID, Nullable<int> polId, string polIdString, string statusChangeTo)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var polIdParameter = polId.HasValue ?
                new ObjectParameter("PolId", polId) :
                new ObjectParameter("PolId", typeof(int));
    
            var polIdStringParameter = polIdString != null ?
                new ObjectParameter("PolIdString", polIdString) :
                new ObjectParameter("PolIdString", typeof(string));
    
            var statusChangeToParameter = statusChangeTo != null ?
                new ObjectParameter("StatusChangeTo", statusChangeTo) :
                new ObjectParameter("StatusChangeTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prUpdatePolRecord", userIDParameter, polIdParameter, polIdStringParameter, statusChangeToParameter);
        }
    
        public virtual ObjectResult<prGetIncomeExpenseReport_Result> prGetIncomeExpenseReport(Nullable<int> userID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetIncomeExpenseReport_Result>("prGetIncomeExpenseReport", userIDParameter, fromDateParameter, toDateParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> prSaveJobInfo(Nullable<int> jobId, Nullable<int> driverId, Nullable<System.DateTime> jobDate, Nullable<int> carId, string jobDescription, string status, Nullable<System.DateTime> jobCompletedDate, string busStatus, Nullable<int> assignedMechanic, string remark, Nullable<int> createdBy, Nullable<System.DateTime> created)
        {
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var driverIdParameter = driverId.HasValue ?
                new ObjectParameter("DriverId", driverId) :
                new ObjectParameter("DriverId", typeof(int));
    
            var jobDateParameter = jobDate.HasValue ?
                new ObjectParameter("JobDate", jobDate) :
                new ObjectParameter("JobDate", typeof(System.DateTime));
    
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var jobDescriptionParameter = jobDescription != null ?
                new ObjectParameter("JobDescription", jobDescription) :
                new ObjectParameter("JobDescription", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var jobCompletedDateParameter = jobCompletedDate.HasValue ?
                new ObjectParameter("JobCompletedDate", jobCompletedDate) :
                new ObjectParameter("JobCompletedDate", typeof(System.DateTime));
    
            var busStatusParameter = busStatus != null ?
                new ObjectParameter("BusStatus", busStatus) :
                new ObjectParameter("BusStatus", typeof(string));
    
            var assignedMechanicParameter = assignedMechanic.HasValue ?
                new ObjectParameter("AssignedMechanic", assignedMechanic) :
                new ObjectParameter("AssignedMechanic", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveJobInfo", jobIdParameter, driverIdParameter, jobDateParameter, carIdParameter, jobDescriptionParameter, statusParameter, jobCompletedDateParameter, busStatusParameter, assignedMechanicParameter, remarkParameter, createdByParameter, createdParameter);
        }
    
        public virtual ObjectResult<prGetPartsDetails_Result1> prGetPartsDetails(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetPartsDetails_Result1>("prGetPartsDetails", userIdParameter);
        }
    
        public virtual ObjectResult<string> prSaveStoreOut(Nullable<int> storeInfoId, Nullable<int> jobId, Nullable<int> partsId, Nullable<decimal> quantityOut, string status, Nullable<int> createdBy, Nullable<System.DateTime> created)
        {
            var storeInfoIdParameter = storeInfoId.HasValue ?
                new ObjectParameter("StoreInfoId", storeInfoId) :
                new ObjectParameter("StoreInfoId", typeof(int));
    
            var jobIdParameter = jobId.HasValue ?
                new ObjectParameter("JobId", jobId) :
                new ObjectParameter("JobId", typeof(int));
    
            var partsIdParameter = partsId.HasValue ?
                new ObjectParameter("PartsId", partsId) :
                new ObjectParameter("PartsId", typeof(int));
    
            var quantityOutParameter = quantityOut.HasValue ?
                new ObjectParameter("QuantityOut", quantityOut) :
                new ObjectParameter("QuantityOut", typeof(decimal));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdParameter = created.HasValue ?
                new ObjectParameter("Created", created) :
                new ObjectParameter("Created", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveStoreOut", storeInfoIdParameter, jobIdParameter, partsIdParameter, quantityOutParameter, statusParameter, createdByParameter, createdParameter);
        }
    
        public virtual ObjectResult<string> prSaveMultiPayment(Nullable<int> paymentId, Nullable<int> carLogId, Nullable<decimal> paymentAmount, Nullable<decimal> systemAmount, string notes, Nullable<int> paySlipId, string paymentStatus, Nullable<int> receivedBy, string receivedByName, Nullable<System.DateTime> receivedDate, string status, Nullable<int> createdBy, Nullable<System.DateTime> update, string paymentType)
        {
            var paymentIdParameter = paymentId.HasValue ?
                new ObjectParameter("PaymentId", paymentId) :
                new ObjectParameter("PaymentId", typeof(int));
    
            var carLogIdParameter = carLogId.HasValue ?
                new ObjectParameter("CarLogId", carLogId) :
                new ObjectParameter("CarLogId", typeof(int));
    
            var paymentAmountParameter = paymentAmount.HasValue ?
                new ObjectParameter("PaymentAmount", paymentAmount) :
                new ObjectParameter("PaymentAmount", typeof(decimal));
    
            var systemAmountParameter = systemAmount.HasValue ?
                new ObjectParameter("SystemAmount", systemAmount) :
                new ObjectParameter("SystemAmount", typeof(decimal));
    
            var notesParameter = notes != null ?
                new ObjectParameter("Notes", notes) :
                new ObjectParameter("Notes", typeof(string));
    
            var paySlipIdParameter = paySlipId.HasValue ?
                new ObjectParameter("PaySlipId", paySlipId) :
                new ObjectParameter("PaySlipId", typeof(int));
    
            var paymentStatusParameter = paymentStatus != null ?
                new ObjectParameter("PaymentStatus", paymentStatus) :
                new ObjectParameter("PaymentStatus", typeof(string));
    
            var receivedByParameter = receivedBy.HasValue ?
                new ObjectParameter("ReceivedBy", receivedBy) :
                new ObjectParameter("ReceivedBy", typeof(int));
    
            var receivedByNameParameter = receivedByName != null ?
                new ObjectParameter("ReceivedByName", receivedByName) :
                new ObjectParameter("ReceivedByName", typeof(string));
    
            var receivedDateParameter = receivedDate.HasValue ?
                new ObjectParameter("ReceivedDate", receivedDate) :
                new ObjectParameter("ReceivedDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var updateParameter = update.HasValue ?
                new ObjectParameter("Update", update) :
                new ObjectParameter("Update", typeof(System.DateTime));
    
            var paymentTypeParameter = paymentType != null ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("prSaveMultiPayment", paymentIdParameter, carLogIdParameter, paymentAmountParameter, systemAmountParameter, notesParameter, paySlipIdParameter, paymentStatusParameter, receivedByParameter, receivedByNameParameter, receivedDateParameter, statusParameter, createdByParameter, updateParameter, paymentTypeParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> prCheckAmountValidationForMultiPayment(Nullable<decimal> amount, string carLogIdList, Nullable<int> userId)
        {
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var carLogIdListParameter = carLogIdList != null ?
                new ObjectParameter("CarLogIdList", carLogIdList) :
                new ObjectParameter("CarLogIdList", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("prCheckAmountValidationForMultiPayment", amountParameter, carLogIdListParameter, userIdParameter);
        }
    
        public virtual ObjectResult<prGetPaySlip_Result> prGetPaySlip(Nullable<int> userID, Nullable<int> paySlipId, string bookNo, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var paySlipIdParameter = paySlipId.HasValue ?
                new ObjectParameter("PaySlipId", paySlipId) :
                new ObjectParameter("PaySlipId", typeof(int));
    
            var bookNoParameter = bookNo != null ?
                new ObjectParameter("BookNo", bookNo) :
                new ObjectParameter("BookNo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetPaySlip_Result>("prGetPaySlip", userIDParameter, paySlipIdParameter, bookNoParameter, typeParameter);
        }
    
        public virtual ObjectResult<prGetCarDetails_Result1> prGetCarDetails(Nullable<int> userID, Nullable<int> carId, string type)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var carIdParameter = carId.HasValue ?
                new ObjectParameter("CarId", carId) :
                new ObjectParameter("CarId", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<prGetCarDetails_Result1>("prGetCarDetails", userIDParameter, carIdParameter, typeParameter);
        }
    }
}
